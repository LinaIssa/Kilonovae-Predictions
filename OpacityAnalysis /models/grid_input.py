import numpy as npimport scipy as sp#import myfunc as mfimport matplotlib.pyplot as pltfrom matplotlib.colors import Normalizefrom mpl_toolkits.mplot3d import Axes3DDAY = 86400CLIGHT = 2.99792458e10MSUN = 1.989e33N = 100t = 1 * DAYvmax = 0.9 * CLIGHTvmax_wind = 0.08 * CLIGHTvmin = 0.025 * CLIGHTrmax = vmax * tdr = 2 * rmax / Nl = np.arange(-rmax+dr/2.,rmax+dr/2.,dr)tref = 1 * DAYMej_ref = 0.03 * MSUNvref_dyn = 0.05 * CLIGHTvtr = 0.3 * CLIGHTrho_ref_dyn = Mej_ref / 4. / np.pi / (vref_dyn * tref)**3 / np.log(vtr/vref_dyn) alpha1 = 3alpha2 = 6theta =  np.pi/4.filename = "grid_input_phi%.0f_sin_dyn.txt"%(theta/np.pi*180.)f = open(filename,"w")f.write("%d %g %g \n"%(N,rmax,t))x = []y = []z = []Yetot = []denstot = []size = len(l)msum_dyn = 0msum_wind = 0for ix in range(0,size): for iy in range(0,size):  for iz in range(0,size):         r = np.sqrt(l[size-1-ix]**2+l[size-1-iy]**2+l[size-1-iz]**2)   cosz_angle = l[size-1-iz] / r   sinz_angle = np.sqrt(1-(cosz_angle**2))   if (r > vmin * t and r < vmax_wind * t):    dens = rho_ref_dyn * (vref_dyn*t/r)**alpha1 * pow((t / tref ),-3.) *0.03/0.020394  # t ---> tref in the r**-alpha    Ye = 0.25    msum_wind += dens * dr**3   else:       # Density    if (r < vmin * t or r > vmax * t):     dens = 1e-50     Ye = 0.4    else:     dens = rho_ref_dyn * (vref_dyn*t/r)**alpha2 * pow((t / tref ),-3.)  * sinz_angle**2 *0.01/ 0.000926        # Ye     if (abs(cosz_angle) < abs( np.cos(np.pi/2.-theta) ) ):      Ye = 0.2     else:      Ye = 0.4     msum_dyn += dens * dr**3   f.write("%g %g %g %g %g \n"%(l[size-1-ix],l[size-1-iy],l[size-1-iz],dens,Ye))   if (abs(l[size-1-ix])<=l[int(N/2)]):    #x.append(l[ix])    y.append(l[size-1-iy])    z.append(l[size-1-iz])    Yetot.append(Ye)    denstot.append(dens)print("Mdyn  %f"%(msum_dyn / MSUN))print("Mwind  %f"%(msum_wind / MSUN))fig = plt.figure()ax = fig.add_subplot(111)norm = Normalize(min(denstot), max(denstot))s=ax.scatter(y,z,c=np.log10(denstot), cmap = 'plasma', norm = norm, marker="s",s=15, vmin=(-23), vmax=-18)colorbar_ax = fig.add_axes([0.47, 0.56, 0.35, 0.025])cbar = plt.colorbar(s,cax=colorbar_ax,orientation='horizontal')fig.show()plt.savefig('mapp_dens_sin_dyn.pdf')f.close()